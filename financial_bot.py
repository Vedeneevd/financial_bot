import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'model-hexagon-466415-b1-cae1b431f892.json'
SPREADSHEET_ID = '12BDetUqLfdHTbEd29eZ4jj6-CQqxYBABRtNTCObkWns'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
EMOJI = {
    "money": "üí∞",
    "chart": "üìä",
    "house": "üè†",
    "car": "üöó",
    "gem": "üíé",
    "calendar": "üìÖ",
    "price": "üè∑Ô∏è",
    "camera": "üì∏",
    "done": "‚úÖ",
    "error": "‚ùå",
    "warning": "‚ö†Ô∏è"
}


# –°—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
def bold(text):
    return f"<b>{text}</b>"


def italic(text):
    return f"<i>{text}</i>"


# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    choose_asset_group = State()
    choose_asset_subgroup = State()
    asset_name = State()
    asset_amount = State()
    entry_date = State()
    entry_price = State()
    exit_date = State()
    exit_price = State()
    image_url = State()


# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —Ç–æ—á–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
asset_groups = {
    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã": [
        "–ê–∫—Ü–∏–∏",
        "–û–±–ª–∏–≥–∞—Ü–∏–∏",
        "–ò–Ω–¥–µ–∫—Å–Ω—ã–µ —Ñ–æ–Ω–¥—ã (ETF, –ë–ü–ò–§)",
        "–ü–∞–µ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–æ–Ω–¥—ã",
        "–¶–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
        "REIT"
    ],
    "–†–µ–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã": [
        "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–∂–∏–ª–∞—è)",
        "–ó–µ–º–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏",
        "–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã",
        "–°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–∫–æ–º–º–æ–¥–∏—Ç–∏)"
    ],
    "–î–µ–Ω–µ–∂–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã": [
        "–ù–∞–ª–∏—á–Ω—ã–µ –∏ —Å—á–µ—Ç–∞",
        "–î–µ–ø–æ–∑–∏—Ç—ã/–≤–∫–ª–∞–¥—ã"
    ],
    "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤—ã": [
        "–ß–∞—Å—Ç–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –≤–µ–Ω—á—É—Ä–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª",
        "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
        "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        "–õ–∏–∑–∏–Ω–≥–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
    ],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã —Ä–æ—Å–∫–æ—à–∏": [
        "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏, —è—Ö—Ç—ã, –ª–∏—á–Ω—ã–µ —Å—É–¥–∞",
        "–ê—Ä–µ–Ω–¥–∞ –∏ —á–∞—Ä—Ç–µ—Ä"
    ]
}


# –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —ç–º–æ–¥–∑–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    welcome_text = f"""
{bold(f'{EMOJI["chart"]} –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä')}

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! 
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ç–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.

{italic('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞:')}
"""

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=group)] for group in asset_groups.keys()
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é..."
    )

    await state.set_state(Form.choose_asset_group)
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∞–∫—Ç–∏–≤–æ–≤
@dp.message(Form.choose_asset_group)
async def process_asset_group(message: types.Message, state: FSMContext):
    if message.text not in asset_groups:
        await message.answer(
            f"{EMOJI['error']} {bold('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é')}",
            parse_mode="HTML"
        )
        return

    await state.update_data(asset_group=message.text)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=subgroup)] for subgroup in asset_groups[message.text]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é..."
    )

    await state.set_state(Form.choose_asset_subgroup)
    await message.answer(
        f"{EMOJI['chart']} {bold('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
@dp.message(Form.choose_asset_subgroup)
async def process_asset_subgroup(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_group = data.get('asset_group')

    if message.text not in asset_groups[current_group]:
        await message.answer(
            f"{EMOJI['error']} {bold('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é')}",
            parse_mode="HTML"
        )
        return

    await state.update_data(asset_subgroup=message.text)
    await state.set_state(Form.asset_name)
    await message.answer(
        f"{EMOJI['price']} {bold('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞:')}\n"
        f"{italic('–ü—Ä–∏–º–µ—Ä: –ê–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞, –ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ')}",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞
@dp.message(Form.asset_name)
async def process_asset_name(message: types.Message, state: FSMContext):
    await state.update_data(asset_name=message.text)
    await state.set_state(Form.asset_amount)
    await message.answer(
        f"{EMOJI['chart']} {bold('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')}\n"
        f"{italic('–¶–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É')}",
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message(Form.asset_amount)
async def process_asset_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(asset_amount=amount)
        await state.set_state(Form.entry_date)
        await message.answer(
            f"{EMOJI['calendar']} {bold('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏:')}\n"
            f"{italic('–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05.2023)')}",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer(
            f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 5.5)",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏
@dp.message(Form.entry_date)
async def process_entry_date(message: types.Message, state: FSMContext):
    await state.update_data(entry_date=message.text)
    await state.set_state(Form.entry_price)
    await message.answer(
        f"{EMOJI['money']} {bold('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏:')}\n"
        f"{italic('–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 1250.50)')}",
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
@dp.message(Form.entry_price)
async def process_entry_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(entry_price=price)
        await state.set_state(Form.exit_date)
        await message.answer(
            f"{EMOJI['calendar']} {bold('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏:')}\n"
            f"{italic('–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ "-" –µ—Å–ª–∏ –∞–∫—Ç–∏–≤ –Ω–µ –ø—Ä–æ–¥–∞–Ω')}",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer(
            f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 1250.50)",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø—Ä–æ–¥–∞–∂–∏
@dp.message(Form.exit_date)
async def process_exit_date(message: types.Message, state: FSMContext):
    await state.update_data(exit_date=message.text)
    await state.set_state(Form.exit_price)
    await message.answer(
        f"{EMOJI['money']} {bold('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏:')}\n"
        f"{italic('–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ "-" –µ—Å–ª–∏ –∞–∫—Ç–∏–≤ –Ω–µ –ø—Ä–æ–¥–∞–Ω')}",
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
@dp.message(Form.exit_price)
async def process_exit_price(message: types.Message, state: FSMContext):
    if message.text != '-':
        try:
            price = float(message.text)
            await state.update_data(exit_price=price)
        except ValueError:
            await message.answer(
                f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!')}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '-'",
                parse_mode="HTML"
            )
            return
    else:
        await state.update_data(exit_price=message.text)

    await state.set_state(Form.image_url)
    await message.answer(
        f"{EMOJI['camera']} {bold('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:')}\n"
        f"{italic('–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç')}",
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
@dp.message(Form.image_url)
async def process_image_url(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    summary_text = f"""
{bold(f'{EMOJI["done"]} –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É:')}

{EMOJI['price']} {bold('–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞:')} {data.get('asset_name')}
{EMOJI['chart']} {bold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:')} {data.get('asset_amount')}
{EMOJI['calendar']} {bold('–î–∞—Ç–∞ –≤—Ö–æ–¥–∞:')} {data.get('entry_date')}
{EMOJI['money']} {bold('–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:')} {data.get('entry_price')}
{EMOJI['calendar']} {bold('–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:')} {data.get('exit_date', '-')}
{EMOJI['money']} {bold('–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞:')} {data.get('exit_price', '-')}
{EMOJI['camera']} {bold('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:')} {'–ï—Å—Ç—å' if message.text != '-' else '–ù–µ—Ç'}
"""

    await message.answer(summary_text, parse_mode="HTML")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Sheets (—Ç–æ—á–Ω–æ –ø–æ –≤–∞—à–∏–º —Å—Ç–æ–ª–±—Ü–∞–º)
    row_data = [
        data.get('asset_name', ''),  # –°—Ç–æ–ª–±–µ—Ü A - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
        data.get('asset_amount', ''),  # –°—Ç–æ–ª–±–µ—Ü B - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        data.get('entry_date', ''),  # –°—Ç–æ–ª–±–µ—Ü C - –î–∞—Ç–∞ –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏
        data.get('entry_price', ''),  # –°—Ç–æ–ª–±–µ—Ü D - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏
        data.get('exit_date', ''),  # –°—Ç–æ–ª–±–µ—Ü E - –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏
        data.get('exit_price', ''),  # –°—Ç–æ–ª–±–µ—Ü F - –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏
        message.text if message.text != '-' else ''  # –°—Ç–æ–ª–±–µ—Ü G - –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    ]

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
        all_values = sheet.get_all_values()

        # –ï—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if not all_values:
            sheet.append_row([
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "–î–∞—Ç–∞ –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏",
                "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏",
                "–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏",
                "–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏",
                "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        sheet.append_row(row_data)

    except Exception as e:
        await message.answer(
            f"{EMOJI['error']} {bold('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:')}\n{str(e)}",
            parse_mode="HTML"
        )

    await state.clear()


async def main():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
    try:
        creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
        client = gspread.authorize(creds)
        global sheet
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        print(f"{EMOJI['done']} –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")
    except FileNotFoundError:
        print(f"{EMOJI['error']} –§–∞–π–ª {SERVICE_ACCOUNT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        exit()
    except gspread.exceptions.APIError as e:
        print(f"{EMOJI['error']} –û—à–∏–±–∫–∞ API Google: {e}")
        exit()
    except Exception as e:
        print(f"{EMOJI['error']} –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit()

    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())