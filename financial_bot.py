import os
import logging
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'model-hexagon-466415-b1-cae1b431f892.json'
SPREADSHEET_ID = '12BDetUqLfdHTbEd29eZ4jj6-CQqxYBABRtNTCObkWns'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
EMOJI = {
    "money": "üí∞",
    "chart": "üìä",
    "house": "üè†",
    "car": "üöó",
    "gem": "üíé",
    "calendar": "üìÖ",
    "price": "üè∑Ô∏è",
    "camera": "üì∏",
    "done": "‚úÖ",
    "error": "‚ùå",
    "warning": "‚ö†Ô∏è",
    "back": "üîô",
    "contact": "üìû",
    "user": "üë§",
    "email": "üìß",
    "phone": "üì±",
    "add": "‚ûï",
    "list": "üìã",
    "bank": "üè¶",
    "stock": "üìà",
    "real_estate": "üè†",
    "alternative": "üé®",
    "transport": "üöó"
}

# –í–∞–ª—é—Ç–∞
CURRENCIES = ["USD (–î–æ–ª–ª–∞—Ä)", "EUR (–ï–≤—Ä–æ)", "CNY (–Æ–∞–Ω—å)", "RUB (–†—É–±–ª—å)", "CHF (–§—Ä–∞–Ω–∫)"]

# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤
ASSET_EXAMPLES = {
    "–ê–∫—Ü–∏–∏": "–ê–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞, –ê–∫—Ü–∏–∏ –ì–∞–∑–ø—Ä–æ–º–∞, –ê–∫—Ü–∏–∏ Apple",
    "–û–±–ª–∏–≥–∞—Ü–∏–∏": "–û–§–ó-26242, –û–±–ª–∏–≥–∞—Ü–∏–∏ –†–ñ–î, –ï–≤—Ä–æ–æ–±–ª–∏–≥–∞—Ü–∏–∏ –†–§-2028",
    "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–∂–∏–ª–∞—è)": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ, –î–æ–º –≤ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ, –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –°–æ—á–∏",
    "–ó–µ–º–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏": "–£—á–∞—Å—Ç–æ–∫ 10 —Å–æ—Ç–æ–∫ –≤ –õ–µ–Ω–æ–±–ª–∞—Å—Ç–∏, –ó–µ–º–ª—è –ø–æ–¥ –ò–ñ–° –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ",
    "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏, —è—Ö—Ç—ã, –ª–∏—á–Ω—ã–µ —Å—É–¥–∞": "Toyota Camry, –Ø—Ö—Ç–∞ Princess 45, –ö–∞—Ç–µ—Ä Mercury",
    "–¶–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": "Bitcoin, Ethereum, Solana"
}


# –°—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
def bold(text):
    return f"<b>{text}</b>"


def italic(text):
    return f"<i>{text}</i>"


# –í–∞–ª–∏–¥–∞—Ü–∏—è email
def is_valid_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None


# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone):
    pattern = r'^(\+7|7|8)?[\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
    return re.match(pattern, phone) is not None


# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
def is_valid_date(date_str):
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False


# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
class Form(StatesGroup):
    choose_asset_group = State()
    choose_asset_subgroup = State()
    asset_name = State()
    asset_amount = State()
    currency = State()  # –í–∞–ª—é—Ç–∞ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥ –¥–∞—Ç–æ–π
    entry_price = State()  # –¶–µ–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥ –¥–∞—Ç–æ–π
    entry_date = State()  # –î–∞—Ç–∞ –ø–æ—Å–ª–µ —Ü–µ–Ω—ã
    exit_date = State()
    exit_price = State()
    image_url = State()
    add_another_asset = State()
    contact_name = State()
    contact_email = State()
    contact_phone = State()


# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —Ç–æ—á–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
asset_groups = {
    f"{EMOJI['stock']} –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã": [
        f"{EMOJI['chart']} –ê–∫—Ü–∏–∏",
        f"{EMOJI['money']} –û–±–ª–∏–≥–∞—Ü–∏–∏",
        f"{EMOJI['list']} –ò–Ω–¥–µ–∫—Å–Ω—ã–µ —Ñ–æ–Ω–¥—ã (ETF, –ë–ü–ò–§)",
        f"{EMOJI['bank']} –ü–∞–µ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–æ–Ω–¥—ã",
        f"{EMOJI['gem']} –¶–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
        f"{EMOJI['house']} REIT"
    ],
    f"{EMOJI['real_estate']} –†–µ–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã": [
        f"{EMOJI['house']} –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–∂–∏–ª–∞—è)",
        f"{EMOJI['gem']} –ó–µ–º–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏",
        f"{EMOJI['gem']} –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã",
        f"{EMOJI['money']} –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–∫–æ–º–º–æ–¥–∏—Ç–∏)"
    ],
    f"{EMOJI['bank']} –î–µ–Ω–µ–∂–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã": [
        f"{EMOJI['money']} –ù–∞–ª–∏—á–Ω—ã–µ –∏ —Å—á–µ—Ç–∞",
        f"{EMOJI['bank']} –î–µ–ø–æ–∑–∏—Ç—ã/–≤–∫–ª–∞–¥—ã"
    ],
    f"{EMOJI['alternative']} –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤—ã": [
        f"{EMOJI['money']} –ß–∞—Å—Ç–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –≤–µ–Ω—á—É—Ä–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª",
        f"{EMOJI['gem']} –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
        f"{EMOJI['user']} –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        f"{EMOJI['chart']} –õ–∏–∑–∏–Ω–≥–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
    ],
    f"{EMOJI['transport']} –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã —Ä–æ—Å–∫–æ—à–∏": [
        f"{EMOJI['car']} –ê–≤—Ç–æ–º–æ–±–∏–ª–∏, —è—Ö—Ç—ã, –ª–∏—á–Ω—ã–µ —Å—É–¥–∞",
        f"{EMOJI['money']} –ê—Ä–µ–Ω–¥–∞ –∏ —á–∞—Ä—Ç–µ—Ä"
    ]
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫
def create_keyboard(items, row_width=2, back_button=True):
    buttons = []
    for i in range(0, len(items), row_width):
        row = items[i:i + row_width]
        buttons.append([KeyboardButton(text=item) for item in row])

    if back_button:
        buttons.append([KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")])

    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç..."
    )


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_start_menu(message: types.Message):
    welcome_text = f"""
{bold(f'{EMOJI["chart"]} –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä')}

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! 
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ç–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.

{italic('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:')}
"""

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"{EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} started the bot")
    await state.clear()
    await show_start_menu(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤"
@dp.message(F.text == f"{EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤")
async def add_asset(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} started adding an asset")
    await state.set_state(Form.choose_asset_group)

    keyboard = create_keyboard(
        items=list(asset_groups.keys()),
        row_width=2,
        back_button=True
    )

    await message.answer(
        f"{EMOJI['chart']} {bold('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞:')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–¥ –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫)
@dp.message(F.text == f"{EMOJI['back']} –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()

    state_mapping = {
        Form.choose_asset_subgroup.state: (
        Form.choose_asset_group, None, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞:", list(asset_groups.keys())),
        Form.asset_name.state: (Form.choose_asset_subgroup, data.get('asset_group'), "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                asset_groups.get(data.get('asset_group', ''), [])),
        Form.asset_amount.state: (Form.asset_name, None,
                                  f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞:\n–ü—Ä–∏–º–µ—Ä: {ASSET_EXAMPLES.get(data.get('asset_subgroup', '–ê–∫—Ç–∏–≤')[2:], '–ê–∫—Ç–∏–≤')}",
                                  None),
        Form.currency.state: (
        Form.asset_amount, None, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n–¶–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É", None),
        Form.entry_price.state: (Form.currency, None, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", CURRENCIES),
        Form.entry_date.state: (
        Form.entry_price, None, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏:\n–°—É–º–º–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 1250.50)",
        None),
        Form.exit_date.state: (
        Form.entry_date, None, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏:\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05.2023)", None),
        Form.exit_price.state: (
        Form.exit_date, None, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏:\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '-' –µ—Å–ª–∏ –∞–∫—Ç–∏–≤ –Ω–µ –ø—Ä–æ–¥–∞–Ω", None),
        Form.image_url.state: (
        Form.exit_price, None, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏:\n–°—É–º–º–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ –∏–ª–∏ '-' –µ—Å–ª–∏ –∞–∫—Ç–∏–≤ –Ω–µ –ø—Ä–æ–¥–∞–Ω",
        None),
        Form.add_another_asset.state: (
        Form.image_url, None, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç", None),
        Form.contact_name.state: (Form.add_another_asset, None, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤?", ["–î–∞", "–ù–µ—Ç"]),
        Form.contact_email.state: (Form.contact_name, None, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", None),
        Form.contact_phone.state: (Form.contact_email, None, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n–ü—Ä–∏–º–µ—Ä: example@mail.com", None),
    }

    if current_state in state_mapping:
        prev_state, extra_data, message_text, items = state_mapping[current_state]
        await state.set_state(prev_state)

        if items is not None:
            keyboard = create_keyboard(
                items=items,
                row_width=2,
                back_button=True
            )
            await message.answer(
                f"{EMOJI['chart']} {bold(message_text)}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"{EMOJI['chart']} {bold(message_text)}",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                ),
                parse_mode="HTML"
            )
    else:
        await state.clear()
        await show_start_menu(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∞–∫—Ç–∏–≤–æ–≤
@dp.message(Form.choose_asset_group)
async def process_asset_group(message: types.Message, state: FSMContext):
    if message.text not in asset_groups:
        logger.warning(f"User {message.from_user.id} selected invalid asset group: {message.text}")
        await message.answer(
            f"{EMOJI['error']} {bold('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é')}",
            parse_mode="HTML"
        )
        return

    await state.update_data(asset_group=message.text)
    logger.info(f"User {message.from_user.id} selected asset group: {message.text}")

    keyboard = create_keyboard(
        items=asset_groups[message.text],
        row_width=2,
        back_button=True
    )

    await state.set_state(Form.choose_asset_subgroup)
    await message.answer(
        f"{EMOJI['chart']} {bold('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
@dp.message(Form.choose_asset_subgroup)
async def process_asset_subgroup(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_group = data.get('asset_group')

    if message.text not in asset_groups[current_group]:
        logger.warning(f"User {message.from_user.id} selected invalid asset subgroup: {message.text}")
        await message.answer(
            f"{EMOJI['error']} {bold('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é')}",
            parse_mode="HTML"
        )
        return

    await state.update_data(asset_subgroup=message.text)
    logger.info(f"User {message.from_user.id} selected asset subgroup: {message.text}")
    await state.set_state(Form.asset_name)

    example = ASSET_EXAMPLES.get(message.text[2:], "–ê–∫—Ç–∏–≤")
    await message.answer(
        f"{EMOJI['price']} {bold('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞:')}\n"
        f"{italic(f'–ü—Ä–∏–º–µ—Ä: {example}')}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞
@dp.message(Form.asset_name)
async def process_asset_name(message: types.Message, state: FSMContext):
    if len(message.text) > 100:
        await message.answer(
            f"{EMOJI['error']} {bold('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.')}",
            parse_mode="HTML"
        )
        return

    await state.update_data(asset_name=message.text)
    logger.info(f"User {message.from_user.id} entered asset name: {message.text}")
    await state.set_state(Form.asset_amount)
    await message.answer(
        f"{EMOJI['chart']} {bold('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')}\n"
        f"{italic('–¶–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É')}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message(Form.asset_amount)
async def process_asset_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        await state.update_data(asset_amount=amount)
        logger.info(f"User {message.from_user.id} entered asset amount: {amount}")
        await state.set_state(Form.currency)

        keyboard = create_keyboard(
            items=CURRENCIES,
            row_width=2,
            back_button=True
        )
        await message.answer(
            f"{EMOJI['money']} {bold('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except ValueError:
        logger.warning(f"User {message.from_user.id} entered invalid amount: {message.text}")
        await message.answer(
            f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 5.5)",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@dp.message(Form.currency)
async def process_currency(message: types.Message, state: FSMContext):
    if message.text not in CURRENCIES:
        logger.warning(f"User {message.from_user.id} selected invalid currency: {message.text}")
        await message.answer(
            f"{EMOJI['error']} {bold('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é')}",
            parse_mode="HTML"
        )
        return

    await state.update_data(currency=message.text)
    logger.info(f"User {message.from_user.id} selected currency: {message.text}")
    await state.set_state(Form.entry_price)
    await message.answer(
        f"{EMOJI['money']} {bold('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏:')}\n"
        f"{italic('–°—É–º–º–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 1250.50)')}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
@dp.message(Form.entry_price)
async def process_entry_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
        await state.update_data(entry_price=price)
        logger.info(f"User {message.from_user.id} entered entry price: {price}")
        await state.set_state(Form.entry_date)
        await message.answer(
            f"{EMOJI['calendar']} {bold('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏:')}\n"
            f"{italic('–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05.2023)')}",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            ),
            parse_mode="HTML"
        )
    except ValueError:
        logger.warning(f"User {message.from_user.id} entered invalid entry price: {message.text}")
        await message.answer(
            f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 1250.50)",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏
@dp.message(Form.entry_date)
async def process_entry_date(message: types.Message, state: FSMContext):
    if message.text != '-' and not is_valid_date(message.text):
        logger.warning(f"User {message.from_user.id} entered invalid date: {message.text}")
        await message.answer(
            f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '-'",
            parse_mode="HTML"
        )
        return

    await state.update_data(entry_date=message.text)
    logger.info(f"User {message.from_user.id} entered entry date: {message.text}")
    await state.set_state(Form.exit_date)
    await message.answer(
        f"{EMOJI['calendar']} {bold('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏:')}\n"
        f"{italic('–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ "-" –µ—Å–ª–∏ –∞–∫—Ç–∏–≤ –Ω–µ –ø—Ä–æ–¥–∞–Ω')}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø—Ä–æ–¥–∞–∂–∏
@dp.message(Form.exit_date)
async def process_exit_date(message: types.Message, state: FSMContext):
    if message.text != '-' and not is_valid_date(message.text):
        logger.warning(f"User {message.from_user.id} entered invalid exit date: {message.text}")
        await message.answer(
            f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '-'",
            parse_mode="HTML"
        )
        return

    await state.update_data(exit_date=message.text)
    logger.info(f"User {message.from_user.id} entered exit date: {message.text}")
    await state.set_state(Form.exit_price)
    await message.answer(
        f"{EMOJI['money']} {bold('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏:')}\n"
        f"{italic('–°—É–º–º–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ –∏–ª–∏ "-" –µ—Å–ª–∏ –∞–∫—Ç–∏–≤ –Ω–µ –ø—Ä–æ–¥–∞–Ω')}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
@dp.message(Form.exit_price)
async def process_exit_price(message: types.Message, state: FSMContext):
    if message.text != '-':
        try:
            price = float(message.text)
            if price <= 0:
                raise ValueError
            await state.update_data(exit_price=price)
            logger.info(f"User {message.from_user.id} entered exit price: {price}")
        except ValueError:
            logger.warning(f"User {message.from_user.id} entered invalid exit price: {message.text}")
            await message.answer(
                f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!')}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ '-'",
                parse_mode="HTML"
            )
            return
    else:
        await state.update_data(exit_price=message.text)
        logger.info(f"User {message.from_user.id} has no exit price")

    await state.set_state(Form.image_url)
    await message.answer(
        f"{EMOJI['camera']} {bold('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:')}\n"
        f"{italic('–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç')}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
@dp.message(Form.image_url)
async def process_image_url(message: types.Message, state: FSMContext):
    if message.text != '-' and not message.text.startswith(('http://', 'https://')):
        logger.warning(f"User {message.from_user.id} entered invalid image URL: {message.text}")
        await message.answer(
            f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é URL-—Å—Å—ã–ª–∫—É –∏–ª–∏ '-'",
            parse_mode="HTML"
        )
        return

    await state.update_data(image_url=message.text)
    logger.info(f"User {message.from_user.id} entered image URL: {message.text}")
    await state.set_state(Form.add_another_asset)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
            [KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"{EMOJI['chart']} {bold('–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤?')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–∫—Ç–∏–≤"
@dp.message(Form.add_another_asset)
async def process_add_another_asset(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer(
            f"{EMOJI['error']} {bold('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')}",
            parse_mode="HTML"
        )
        return

    if message.text.lower() == "–¥–∞":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
        await save_current_asset(message, state)
        await add_asset(message, state)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await save_current_asset(message, state)
        await state.set_state(Form.contact_name)
        await message.answer(
            f"{EMOJI['user']} {bold('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')}\n"
            f"{italic('–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')}",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            ),
            parse_mode="HTML"
        )


async def save_current_asset(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–∞
    pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(Form.contact_name)
async def process_contact_name(message: types.Message, state: FSMContext):
    if len(message.text) > 50:
        await message.answer(
            f"{EMOJI['error']} {bold('–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.')}",
            parse_mode="HTML"
        )
        return

    await state.update_data(contact_name=message.text)
    logger.info(f"User {message.from_user.id} entered name: {message.text}")
    await state.set_state(Form.contact_email)
    await message.answer(
        f"{EMOJI['email']} {bold('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')}\n"
        f"{italic('–ü—Ä–∏–º–µ—Ä: example@mail.com')}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email
@dp.message(Form.contact_email)
async def process_contact_email(message: types.Message, state: FSMContext):
    if not is_valid_email(message.text):
        logger.warning(f"User {message.from_user.id} entered invalid email: {message.text}")
        await message.answer(
            f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email!')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä: example@mail.com)",
            parse_mode="HTML"
        )
        return

    await state.update_data(contact_email=message.text)
    logger.info(f"User {message.from_user.id} entered email: {message.text}")
    await state.set_state(Form.contact_phone)
    await message.answer(
        f"{EMOJI['phone']} {bold('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')}\n"
        f"{italic('–§–æ—Ä–º–∞—Ç: +79991234567 –∏–ª–∏ 89991234567')}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(Form.contact_phone)
async def process_contact_phone(message: types.Message, state: FSMContext):
    if not is_valid_phone(message.text):
        logger.warning(f"User {message.from_user.id} entered invalid phone: {message.text}")
        await message.answer(
            f"{EMOJI['error']} {bold('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567 –∏–ª–∏ 89991234567)",
            parse_mode="HTML"
        )
        return

    data = await state.get_data()
    username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    summary_text = f"""
{bold(f'{EMOJI["done"]} –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É:')}

{EMOJI['price']} {bold('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:')} {data.get('asset_group', '-')[2:]}
{EMOJI['price']} {bold('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:')} {data.get('asset_subgroup', '-')[2:]}
{EMOJI['price']} {bold('–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞:')} {data.get('asset_name', '-')}
{EMOJI['chart']} {bold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:')} {data.get('asset_amount', '-')}
{EMOJI['money']} {bold('–í–∞–ª—é—Ç–∞:')} {data.get('currency', '-')}
{EMOJI['calendar']} {bold('–î–∞—Ç–∞ –≤—Ö–æ–¥–∞:')} {data.get('entry_date', '-')}
{EMOJI['money']} {bold('–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:')} {data.get('entry_price', '-')} {data.get('currency', '').split()[0] if data.get('entry_price') != '-' else ''}
{EMOJI['calendar']} {bold('–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:')} {data.get('exit_date', '-')}
{EMOJI['money']} {bold('–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞:')} {data.get('exit_price', '-')} {data.get('currency', '').split()[0] if data.get('exit_price') != '-' else ''}
{EMOJI['camera']} {bold('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:')} {'–ï—Å—Ç—å' if data.get('image_url', '-') != '-' else '–ù–µ—Ç'}
{EMOJI['user']} {bold('–ò–º—è:')} {data.get('contact_name', '-')}
{EMOJI['email']} {bold('Email:')} {data.get('contact_email', '-')}
{EMOJI['phone']} {bold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {message.text}
"""

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Sheets
    row_data = [
        data.get('asset_group', '')[2:],  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        data.get('asset_subgroup', '')[2:],  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        data.get('asset_name', ''),
        data.get('asset_amount', ''),
        data.get('currency', ''),
        data.get('entry_date', ''),
        data.get('entry_price', ''),
        data.get('exit_date', ''),
        data.get('exit_price', ''),
        data.get('image_url', ''),
        data.get('contact_name', ''),
        data.get('contact_email', ''),
        message.text,  # phone
        username
    ]

    try:
        all_values = sheet.get_all_values()
        if not all_values:
            sheet.append_row([
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–í–∞–ª—é—Ç–∞", "–î–∞—Ç–∞ –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏", "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏",
                "–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏", "–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏",
                "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–ò–º—è", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            ])
        sheet.append_row(row_data)
        logger.info(f"User {message.from_user.id} successfully saved data to Google Sheets")

        await message.answer(summary_text, parse_mode="HTML")

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
        final_message = f"""
{bold(f'{EMOJI["done"]} –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')}

–í—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
üìß Email: {bold(data.get('contact_email'))}

–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!
"""
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=f"{EMOJI['chart']} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            final_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error saving data for user {message.from_user.id}: {str(e)}")
        await message.answer(
            f"{EMOJI['error']} {bold('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:')}\n{str(e)}",
            parse_mode="HTML"
        )

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message(F.text == f"{EMOJI['chart']} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    logger.info(f"User {message.from_user.id} returned to main menu")
    await show_start_menu(message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
    try:
        creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
        client = gspread.authorize(creds)
        global sheet
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        logger.info(f"{EMOJI['done']} –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not sheet.get_all_values():
            sheet.append_row([
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–í–∞–ª—é—Ç–∞", "–î–∞—Ç–∞ –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏", "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞/–ø–æ–∫—É–ø–∫–∏",
                "–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏", "–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞/–ø—Ä–æ–¥–∞–∂–∏",
                "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–ò–º—è", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            ])
            logger.info("Created headers in Google Sheets")

    except Exception as e:
        logger.error(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        exit()

    logger.info("Starting bot...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())